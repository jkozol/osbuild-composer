#!/usr/bin/python3

import subprocess
import json
import tempfile
import os
import sys

'''
This script generates a json test case. It accepts a compose_request as input through standard input.

{
    "distro": "fedora-30",
    "arch": "x86_64",
    "output-format": "qcow2",
    "filename": "disk.qcow2",
    "blueprint": {}
}

It then outputs a json test case as standard output. 
'''


def run_osbuild(manifest, store):
    osbuild_cmd = ["osbuild", "--store", store, "--json", "-"]
    result = json.loads(subprocess.check_output(osbuild_cmd, encoding="utf-8", input=json.dumps(manifest)))
    return result.get("output_id")


def get_boot_method(output_format):
    format_boot_dict = {
        "partitioned-disk": "nspawn",
        "ext4-filesystem": "nspawn",
        "tar": "nspawn-extract",
        "openstack": "qemu",
        "qcow2": "qemu",
        "vhd": "qemu",        
        "vmdk": "qemu",
        "ami": "qemu-extract",
    }
    return format_boot_dict[output_format]


def main(compose_request):
    # osbuild-pipeline reads the blueprint from a json file so the blueprint contained by the compose request needs to be written to a temp file which can be passed to osbuild-pipeline
    blueprint_file = tempfile.NamedTemporaryFile(dir="/var/tmp", prefix="osbuild-composer-test-blueprint-", mode="w", encoding="utf8").name
    with open(blueprint_file, 'a') as blueprint_write:
        json.dump(compose_request["blueprint"], blueprint_write)

    pipeline_command = ["go", "run", "cmd/osbuild-pipeline/main.go", "-blueprint", blueprint_file, "-distro", compose_request["distro"], "-arch", compose_request["arch"], "-image-type", compose_request["output-format"]]
    manifest = json.loads(subprocess.check_output(pipeline_command))

    rpmmd_command = ["go", "run", "cmd/osbuild-pipeline/main.go", "-blueprint", blueprint_file, "-distro", compose_request["distro"], "-arch", compose_request["arch"], "-image-type", compose_request["output-format"], "-rpmmd"]
    rpmmd = json.loads(subprocess.check_output(rpmmd_command))

    # osbuild requires a store. We use a temp directory for this store so we can create and read our images/trees
    with tempfile.TemporaryDirectory(dir="/var/tmp", prefix="osbuild-composer-test-") as store:
        output_id = run_osbuild(manifest, store)
        image_file = os.path.join(store, "refs", output_id, "disk.qcow2")
        image_info = json.loads(subprocess.check_output(["tools/image-info", image_file]))
        boot = get_boot_method(compose_request["output-format"])
        test_case = {
            "boot": {
                "type": boot,
            },
            "compose-request": {
                "compose_request": compose_request,
            },
            "rpmmd": rpmmd,
            "manifest": manifest,
            "image-info": image_info
        }
        return test_case


if __name__ == '__main__':
    args = json.load(sys.stdin)
    test_case = main(args)
    sys.stdout.write(json.dumps(test_case))
    sys.exit()
